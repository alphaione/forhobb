name: Auto Build MemosTGbot
on:
  workflow_dispatch: # 手动触发按钮
  schedule: # 每周日北京时间10点自动构建
    - cron: '0 2 * * 0'

jobs:
  cross-platform-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 直接拉取源仓库代码
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          repository: usememos/telegram-integration
          ref: main # 可改为特定分支或tag
          path: source-code

      - name: Replace dockerfile
        run: |
          cat <<EOF > ./source-code/Dockerfile
          # Build stage
          FROM --platform=$BUILDPLATFORM golang:alpine AS builder

          WORKDIR /app

          RUN apk add --no-cache git

          COPY go.mod go.sum ./source-code
          RUN go mod download

          COPY . .
          ARG TARGETOS
          ARG TARGETARCH
          RUN CGO_ENABLED=0 GOOS=$TARGETOS GOARCH=$TARGETARCH go build -ldflags="-s -w" -o memogram ./source-code/bin/memogram

          # Run stage
          FROM --platform=$TARGETPLATFORM gcr.io/distroless/static:nonroot

          WORKDIR /app

          ENV SERVER_ADDR=dns:localhost:5230
          ENV BOT_TOKEN=your_telegram_bot_token

          COPY --from=builder /app/memogram .
          COPY .env.example .env

          CMD ["./memogram"]
          EOF

      - name: Get latest release
        id: get-release
        run: |
          LATEST_RELEASE=$(curl -sL https://api.github.com/repos/usememos/telegram-integration/releases/latest | jq -r '.tag_name')
          echo "latest_release=${LATEST_RELEASE}" >> $GITHUB_OUTPUT

      # 配置多架构构建环境
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      # Docker 登录
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 多平台构建推送
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./source-code
          file: ./source-code/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/memosbot:${{ steps.get-release.outputs.latest_release }}
            ${{ secrets.DOCKERHUB_USERNAME }}/memosbot:latest
          build-args: |
            MEMOSBOT_VERSION=${{ steps.get-release.outputs.latest_release }}          
          cache-from: type=gha
          cache-to: type=gha,mode=max
          

