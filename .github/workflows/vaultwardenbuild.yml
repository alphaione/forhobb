name: 自动构建 Vaultwarden | Auto Build Vaultwarden from Source
on:
  workflow_dispatch:  # 手动触发按钮
  schedule:  # 每周日北京时间10点自动构建
    - cron: '0 2 * * 0'

jobs:
  build:
    name: Build vaultwarden(${{ matrix.tag }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dockerfile: docker/Dockerfile.alpine
            tag: alpine
          - dockerfile: docker/Dockerfile.debian
            tag: debian
      fail-fast: false # 允许单个失败不影响其他构建

    permissions:
      contents: read
      packages: write

    steps:
      - name: 🏷️ 获取最新发行版 | Get Latest Release
        id: get-release
        run: |
          LATEST_RELEASE=$(curl -sL https://api.github.com/repos/dani-garcia/vaultwarden/releases/latest | jq -r '.tag_name')
          echo "latest_release=${LATEST_RELEASE}" >> $GITHUB_OUTPUT

      - name: ⏭️ 检查版本号是否需要构建 | Check if build is needed
        id: version-check
        run: |
          if [ -f vault.version ]; then
            OLD_VERSION=$(cat vault.version)
          else
            OLD_VERSION=""
          fi
          echo "old_version=${OLD_VERSION}" >> $GITHUB_OUTPUT
          if [ "${OLD_VERSION}" = "${{ steps.get-release.outputs.latest_release }}" ]; then
            echo "当前版本与 vault.version 相同，无需构建，跳过流程。"
            exit 0
          fi

      - name: 🔄 检出源代码 | Checkout Source Code
        uses: actions/checkout@v4
        with:
          repository: JinkaiNiu/vaultwarden-zh-cn
          # ref: main  # 可改为特定分支或tag
          path: source-code

      - name: 🏗️ 配置 QEMU | Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🔧 配置 Buildx | Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 登录 Docker Hub | Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🚀 构建并推送镜像 | Build and Push Image
        uses: docker/build-push-action@v6
        with:
          context: ./source-code
          file: ./source-code/${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vaultwarden-self:${{ steps.get-release.outputs.latest_release }}-${{ matrix.tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/vaultwarden-self:${{ matrix.tag }}
          build-args: |
            VAULTWARDEN_VERSION=${{ steps.get-release.outputs.latest_release }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ✅ 完成并输出信息 | Complete and Print Info
        run: |
          echo "Vaultwarden-${{ matrix.tag }}镜像已构建并推送, 版本: ${{ steps.get-release.outputs.latest_release }}"
          echo "Build & push for Vaultwarden-${{ matrix.tag }} completed, version: ${{ steps.get-release.outputs.latest_release }}"
          
      - name: 📦 提交 vault.version 文件 | Commit vault.version file
        run: |
          echo "${{ steps.get-release.outputs.latest_release }}" > vault.version
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add vault.version
          git commit -m "chore: update vault.version to ${{ steps.get-release.outputs.latest_release }}" || echo "No changes to commit"
          git push
